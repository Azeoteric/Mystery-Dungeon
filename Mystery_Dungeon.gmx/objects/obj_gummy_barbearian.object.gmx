<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gummy_barbearian</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-16</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make stuff work
path = path_add();
alarm[0] = room_speed;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variable inits.
MOVE_SPEED = 3;
attack = 3;
VISION_RADIUS = 256;
vSpeed = 0;
scr_grid();
hSpeed = 0;
sees_player = false;
moveCounter = 0;
moveDir = irandom(3);
moveFrames = 80;
hspd = 0;
vspd = 0;
hit_points = 10;
image_speed = .2;
direction_choice = irandom(3);
LEFT = 0;
DOWN = 1;
UP = 2;
RIGHT = 3;
has_hit_wall = false;
randomDirCounter = 0;
requirement = 60;
currentX = x;
currentY = y;
circleCounter = 0;
circleStart = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Toward Player
if(global.is_game_running){
if(sees_player){
    scr_path_to_player();
}
//alarm[0] = room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles damage

if(place_meeting(x, y, obj_arrow_projectile)) {
                   hit_points -= obj_player.attack;
}
if(hit_points &lt; 0) {
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
if(global.is_game_running) {
moveFrames = irandom(80) + 40;
currentX = x;
currentY = y;
if(!sees_player){
    //sees_player = scr_sees_player();
    if(global.is_game_running) {
       /*if(moveCounter &gt;= moveFrames) {
          moveDir = irandom(3);
          moveCounter = 0;
       }
    
            switch(moveDir) {
                case 0:
                    //MOVE LEFT
                        hspd = -1;
                        vspd = 0;
                        moveCounter++;
                    break;
                case 1:
                    //MOVE UP
                        hspd = 0;
                        vspd = -1;
                        moveCounter++;
                    break;
                case 2:
                    //MOVE RIGHT
                        hspd = 1;
                        vspd = 0;
                        moveCounter++;
                    break;
                case 3:
                    //MOVE DOWN
                        hspd = 0;
                        vspd = 1;
                        moveCounter++;
                    break;
                }
       scr_move_enemy(hspd + sign(hspd) , vspd + sign(vspd));  */   
        if(circleCounter &gt;= 4){
            switch(circleStart){
                case 0:
                    direction_choice = RIGHT;
                    circleCounter = 0;
                    has_hit_wall = false;
                    break;
                case 1:
                    direction_choice = UP;
                    circleCounter = 0;
                    has_hit_wall = false;
                    break;
                case 2:
                    direction_choice = DOWN;
                    circleCounter = 0;
                    has_hit_wall = false;
                    break;
                case 3:
                    direction_choice = LEFT;
                    circleCounter = 0;
                    has_hit_wall = false;
                    break;
            }
        }    
        if(has_hit_wall){
            switch(direction_choice){
                case 0: //LEFT
                    //TRY TO MOVE DOWN. IF WALL, MOVE LEFT
                    if(!scr_move_enemy(0, 1)){
                        if(!scr_move_enemy(-1, 0)){//MOVE LEFT//IF LEFT IS WALL, MOVE UP
                            if(!scr_move_enemy(0, -1)){
                                //IF UP IS WALL, MOVE RIGHT
                                if(scr_move_enemy(1, 0)){
                                    direction_choice = RIGHT;
                                    circleCounter = 0;
                                }
                            }
                            else{
                                direction_choice = UP;
                                circleCounter = 0;
                            }
                        }
                        else{
                            direction_choice = LEFT;
                            circleCounter = 0;
                        }
                    }
                    else{
                        direction_choice = DOWN;
                        if(circleCounter == 0){
                            circleStart = LEFT;
                        }
                        circleCounter++;
                    }
                    break;
                
                case 1: //DOWN
                    //TRY TO MOVE RIGHT. IF WALL, MOVE DOWN.
                    if(!scr_move_enemy(1, 0)){
                        if(!scr_move_enemy(0, 1)){
                            if(!scr_move_enemy(-1, 0)){
                                if(scr_move_enemy(0, -1)){
                                    direction_choice = UP;
                                    circleCounter = 0;
                                }
                            }
                            else{
                                direction_choice = LEFT;
                                circleCounter = 0;
                            }
                        }
                        else{
                            direction_choice = DOWN;
                            circleCounter = 0;
                        }
                    }
                    else{
                        direction_choice = RIGHT;
                        if(circleCounter == 0){
                            circleStart = DOWN;
                        }
                        circleCounter++;
                    }
                    break;  
                case 2: //UP 
                //TRY TO MOVE LEFT. IF WALL, MOVE UP.
                    if(!scr_move_enemy(-1, 0)){
                        if(!scr_move_enemy(0, -1)){
                            if(!scr_move_enemy(1, 0)){
                                if(scr_move_enemy(0, 1)){
                                    direction_choice = DOWN;
                                    circleCounter = 0;
                                }
                            }
                            else{
                                direction_choice = RIGHT;
                                circleCounter = 0;
                            }
                        }
                        else{
                            direction_choice = UP;
                            circleCounter = 0;
                        }
                    }
                    else{
                        direction_choice = LEFT;
                        if(circleCounter == 0){
                            circleStart = UP;
                        }
                        circleCounter++;
                    }
                    break;
                case 3:  //RIGHT
                    //TRY TO MOVE UP. IF WALL, MOVE RIGHT
                    if(!scr_move_enemy(0, -1)){
                        if(!scr_move_enemy(1, 0)){
                            if(!scr_move_enemy(0, 1)){
                                if(scr_move_enemy(-1, 0)){
                                    direction_choice = LEFT;
                                    circleCounter = 0;
                                }   
                            }
                            else{
                                direction_choice = DOWN;
                                circleCounter = 0;
                            }
                        }
                        else{
                            direction_choice = RIGHT;
                            circleCounter = 0;   
                        }
                    }
                    else{
                        direction_choice = UP;
                        if(circleCounter == 0){
                            circleStart = RIGHT;
                        }
                        circleCounter++;
                    }
                    break;
            }
        }
        else {
            switch(direction_choice){
                case 0:
                    if(!scr_move_enemy(-1, 0)){
                        has_hit_wall = true;
                        direction_choice = UP;
                    }
                    break;
                case 1:
                    if(!scr_move_enemy(0, 1)){
                        has_hit_wall = true;
                        direction_choice = LEFT;
                    }
                    break;
                case 2:
                    if(!scr_move_enemy(0, -1)){
                        has_hit_wall = true;
                        direction_choice = RIGHT;
                    }
                    
                    break;
                case 3:
                    if(!scr_move_enemy(1, 0)){
                        has_hit_wall = true;
                        direction_choice = DOWN;
                    }
                    break;
            }
        }
        
        
        
        //SECOND ATTEMPT
        
       /* if (randomDirCounter &gt; requirement) {
            var willChangeDir = irandom(100);
            if (willChangeDir &gt; 65) {
                direction_choice = irandom(3);   
            }
            requirement = irandom(50) + 50;
            randomDirCounter = 0;          
        }
        switch(direction_choice){
        case LEFT:
                if (!scr_move_enemy(-1, 0)) {
                    direction_choice = irandom(3);
                }
                break;
        case DOWN:
                if (!scr_move_enemy(0 , 1)) {
                    direction_choice = irandom(3);
                }
                break;
        case UP:
                if (!scr_move_enemy(0, -1)) {
                    direction_choice = irandom(3);
                }
                break;
        case RIGHT:
                if (!scr_move_enemy(1, 0)) {
                    direction_choice = irandom(3);
                }
                break;
        }
        */
        

    }
        
    
}
else {
    scr_path_to_player();
    /*hspd = 0;
    vspd = 0;
    if(obj_player.x &lt; x){
        hspd = -1;
    }
    else if(obj_player.x &gt; x){
        hspd = 1;
    }
    if(obj_player.y &lt; y){
        vspd = -1;
    }
    else if(obj_player.y &gt; y){
        vspd = 1;
    }
    var currentX = x;
    var currentY = y;
    if(vspd != 0 &amp;&amp; hspd != 0){
        scr_move_enemy((hspd) / sqrt(2), (vspd) / sqrt(2));
    }
    else {
        scr_move_enemy(hspd, vspd);
    }
    if(currentX == x &amp;&amp; x != obj_player.x){
        if(obj_player.y &lt; y){
            vspd = 1;
        }
        else if(obj_player.y &gt; y){
            vspd = -1;
        }
        y+= vspd * MOVE_SPEED;
    }
    if(currentY == y &amp;&amp; y != obj_player.y){
        if(obj_player.x &lt; x){
            hspd = 1;
        }
        else if(obj_player.x &gt; x){
            hspd = -1;
        }
        x+= hspd * MOVE_SPEED;
    }
    direction_choice = irandom(3);*/
}
      //  randomDirCounter++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_gummy_barbearian">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move away 
if (x == other.x &amp;&amp; y == other.y) {
    scr_move_enemy(sign(other.id - id), 0);
}

var dir = point_direction(other.x, other.y, x, y);
var hspd = lengthdir_x(1, dir);  
var vspd = lengthdir_y(1, dir);
  
scr_move_enemy(hspd, vspd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if (path_exists(path)) {
// path_delete(path);
//} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
