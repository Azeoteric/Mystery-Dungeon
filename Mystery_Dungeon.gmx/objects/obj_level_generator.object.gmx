<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the level

// Resize room
room_width = (CELL_WIDTH / 16) * 2048;
room_height = (CELL_HEIGHT / 16) * 2018;

// Set grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

// Initialize variables
    // constants
    RIGHT = 0;
    UP = 1;
    LEFT = 2;
    DOWN = 3;
    // Controller position variables
    cx = width div 2;
    cy = height div 2;
    
    // Temporary variables for rectangular rooms
    rect_x1 = 0;
    rect_x2 = 0;
    rect_y1 = 0;
    rect_y2 = 0;
    
    // This determines how large the room is
    nodes_generated = 0;
    nodes_desired = 15;
    rooms_generated = 0;
    rooms_desired = 6
    
    // This is an array containing all of the rooms that have been generated
    // 0th column - x1
    // 1st column - y1
    // 2nd column - x2
    // 3rd column - y2
    for (var i = 0; i &lt; 40; i++) {
        roomLocations[i, 0] = 0;
        roomLocations[i, 1] = 0;
        roomLocations[i, 2] = 0; 
        roomLocations[i, 3] = 0;
    }
    roomCount = 0;
    
    // Length of current hallway
    hallway_length = 0;
    
    // Node variables
    for (var i = 0; i &lt; 100; i++) {
        nodeLocations[i, 0] = 0;
        nodeLocations[i, 1] = 0;
    }
    nodeCount = 0;
    
// Create grid
grid = ds_grid_create(width, height);

// Fill void
ds_grid_set_region(grid, 0, 0, width - 1, height - 1, VOID);

// Generate random seed
randomize();

// Fill in starting room
rm_height = irandom(4) + 4;
rm_width = irandom(4) + 4;
ds_grid_set_region(grid, cx, cy, cx + rm_width, cy + rm_height, FLOOR);
roomLocations[roomCount, 0] = cx;
roomLocations[roomCount, 1] = cy;
roomLocations[roomCount, 2] = cx + rm_width;
roomLocations[roomCount, 3] = cy + rm_height;
roomCount++;
rooms_generated++;

// Set nodes on starting room
scr_generate_nodes_for_room(cx, cy, cx + rm_width, cy + rm_height, irandom(1) + 1, grid);
// Fill in grid 

while (nodes_generated &lt; nodes_desired || rooms_generated &lt; rooms_desired) {
    
    /*
    // Choose a random node
    var random_node = irandom(nodeCount - 1);
    // Set controller position at that node
    cx = nodeLocations[random_node, 0];
    cy = nodeLocations[random_node, 1];
    for (var i = random_node; i &lt; nodeCount; i++) {
        nodeLocations[i, 0] = nodeLocations[i + 1, 0];
        nodeLocations[i, 1] = nodeLocations[i + 1, 0];
    } */
    
    cx = nodeLocations[nodeCount - 1, 0];
    cy = nodeLocations[nodeCount - 1, 1];
    
    nodeLocations[nodeCount - 1, 0] = -1;
    nodeLocations[nodeCount - 1, 1] = -1;
    nodeCount--;
    
    // Ok this is a mess i admit it
    switch (scr_get_direction(cx, cy, grid)) {
        // going right
        case RIGHT:
            repeat(irandom(3) + 3) {
                cx++;
                clamp(cx, 5, width - 5);
                clamp(cy, 5, height - 5);
                grid[# cx, cy] = FLOOR;
            }
            grid[# cx, cy] = FLOOR_NOT_NODE;
            rm_height = irandom(4) + 4;
            rm_width = irandom(4) + 4;
            rect_x1 = clamp(cx, 5, width - 6);
            rect_y1 = clamp(cy - (rm_height div 2), 5, height - 6);
            rect_x2 = clamp(cx + rm_width, 5, width - 6);
            rect_y2 = clamp(cy + (rm_height div 2), 5, height - 6);
            
            ds_grid_set_region(grid, rect_x1, rect_y1, rect_x2, rect_y2, FLOOR);
            roomLocations[roomCount, 0] = rect_x1;
            roomLocations[roomCount, 1] = rect_y1;
            roomLocations[roomCount, 2] = rect_x2;
            roomLocations[roomCount, 3] = rect_y2;
            roomCount++;
            rooms_generated++;
            scr_generate_nodes_for_room(rect_x1, rect_y1, rect_x2, rect_y2, irandom(2) + 1, grid);
            break;
        // going up
        case UP:
            repeat(irandom(3) + 3) {
                cy--;
                clamp(cx, 5, width - 5);
                clamp(cy, 5, height - 5);
                grid[# cx, cy] = FLOOR;
            }
            grid[# cx, cy] = FLOOR_NOT_NODE;
            rm_height = irandom(4) + 4;
            rm_width = irandom(4) + 4;
            rect_x1 = clamp(cx - (rm_width div 2), 5, width - 6);
            rect_y1 = clamp(cy - rm_height, 5, height - 6);
            rect_x2 = clamp(cx + (rm_width div 2), 5, width - 6);
            rect_y2 = clamp(cy, 5, height - 6);
            
            ds_grid_set_region(grid, rect_x1, rect_y1, rect_x2, rect_y2, FLOOR);
            roomLocations[roomCount, 0] = rect_x1;
            roomLocations[roomCount, 1] = rect_y1;
            roomLocations[roomCount, 2] = rect_x2;
            roomLocations[roomCount, 3] = rect_y2;
            roomCount++;
            rooms_generated++;
            scr_generate_nodes_for_room(rect_x1, rect_y1, rect_x2, rect_y2, irandom(2) + 1, grid);
            break;
        //going left
        case LEFT:
            repeat(irandom(3) + 3) {
                cx--;
                clamp(cx, 5, width - 5);
                clamp(cy, 5, height - 5);
                grid[# cx, cy] = FLOOR;
                grid[# cx, cy] = FLOOR_NOT_NODE;
            rm_height = irandom(4) + 4;
            rm_width = irandom(4) + 4;
            rect_x1 = clamp(cx - rm_width, 5, width - 6);
            rect_y1 = clamp(cy - (rm_height div 2), 5, height - 6);
            rect_x2 = clamp(cx, 5, width - 6);
            rect_y2 = clamp(cy + (rm_height div 2), 5, height - 6);
            
            ds_grid_set_region(grid, rect_x1, rect_y1, rect_x2, rect_y2, FLOOR);
            roomLocations[roomCount, 0] = rect_x1;
            roomLocations[roomCount, 1] = rect_y1;
            roomLocations[roomCount, 2] = rect_x2;
            roomLocations[roomCount, 3] = rect_y2;
            roomCount++;
            rooms_generated++;
            scr_generate_nodes_for_room(rect_x1, rect_y1, rect_x2, rect_y2, irandom(2) + 1, grid);
            }
            break;
        // going down
        case DOWN:
            repeat(irandom(3) + 3) {
                cy++;
                clamp(cx, 5, width - 5);
                clamp(cy, 5, height - 5);
                grid[# cx, cy] = FLOOR;
            }
            grid[# cx, cy] = FLOOR_NOT_NODE;
            rm_height = irandom(4) + 4;
            rm_width = irandom(4) + 4;
            rect_x1 = clamp(cx - (rm_width div 2), 5, width - 6);
            rect_y1 = clamp(cy, 5, height - 6);
            rect_x2 = clamp(cx + (rm_width div 2), 5, width - 6);
            rect_y2 = clamp(cy + rm_height, 5, height - 6);
            
            ds_grid_set_region(grid, rect_x1, rect_y1, rect_x2, rect_y2, FLOOR);
            roomLocations[roomCount, 0] = rect_x1;
            roomLocations[roomCount, 1] = rect_y1;
            roomLocations[roomCount, 2] = rect_x2;
            roomLocations[roomCount, 3] = rect_y2;
            roomCount++;
            rooms_generated++;
            scr_generate_nodes_for_room(rect_x1, rect_y1, rect_x2, rect_y2, irandom(2) + 1, grid);
            break;
    }
    
} 

// Add backgrounds
for (xx = 0; xx &lt; width - 1; xx++) {
    for (yy = 0; yy &lt; height - 1; yy++) {
        if (grid[# xx, yy] == FLOOR) {
            tile_add(bg_floor2, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
        }
        
        if (grid[# xx, yy] == NODE) {
            tile_add(bg_node, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
        }
    }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restart room
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
