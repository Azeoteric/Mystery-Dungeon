<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the level
//Resize the room
room_width = (CELL_WIDTH / 16)  * 720;
room_height = (CELL_HEIGHT / 16) * 720;

//Set Grid Width
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

// Create the grid
grid = ds_grid_create(width, height);

//Fill the grid with the void
ds_grid_set_region(grid, 0, 0, width - 1, height - 1, VOID);

//Randomized the world
randomize();

//Create the controller in the center of the grid
var cx = irandom(width - 8) + 4;//width div 2;
var cy = irandom(height - 8) + 4;//height div 2;



// Give the controller a random direction
var cdir = irandom(3);

// The odds variable for changing direction
var odds = 1;

scr_make_room(cx, cy, true);
loop = 0;
rooms = 1;
// Create the level using 1000 steps;
repeat (irandom(75) + 75) {
    loop++;
    if((irandom(100) &gt; 75) &amp;&amp; (!ds_grid_value_exists(grid, cx - 8, cy - 8, cx + 8, cy + 8, NODE) &amp;&amp; (rooms &lt; 12))) {
          scr_make_room(cx, cy, false, width, height); 
              rooms++;
    }
       
    movement = (irandom(3) + 6);
    
    
    // Randomize the controller direction 
    if (irandom(odds) == odds) {
        cdir = irandom(3);
    }
     var xdir = lengthdir_x(1, cdir * 90);
     var ydir = lengthdir_y(1, cdir * 90);
     // Move the controller 
    
 for(i = 0; i &lt; movement; i++) {          
     if(grid[# cx, cy] == VOID) {  
          grid[# cx, cy] = FLOOR;               
       }
     else {
       i = movement;
       }
     
     cx += xdir;
     cy += ydir;        
     
     // Grid Boundries
     cx = clamp(cx, 4, width - 4);   
     cy = clamp(cy, 4, height - 4);
              
          
      }
}
if(rooms &lt; 8) {
     room_restart()
}
// Making Walls
for (var ypos = 1; ypos &lt; height - 1; ypos++) {
    for (var xpos = 1; xpos &lt; height - 1; xpos++) {
        if (grid[# xpos, ypos] == FLOOR) {
        //Check for Walls
            if(grid[# xpos + 1, ypos] &gt; FLOOR) {
                grid[# xpos + 1, ypos] = WALL;
            }
            if(grid[# xpos - 1, ypos] &gt; FLOOR) {
                grid[# xpos - 1, ypos] = WALL;
            }
            if(grid[# xpos, ypos + 1] &gt; FLOOR) {
                grid[# xpos, ypos + 1] = WALL;
            }  
            if(grid[# xpos, ypos - 1] &gt; FLOOR) {
                grid[# xpos, ypos - 1] = WALL;
            }
        }
        
    }    
}

// Draw the Level
for (ypos  = 0;  ypos &lt; height; ypos++) {
    for (xpos = 0; xpos &lt; height; xpos++) {
        if (grid[# xpos, ypos] == FLOOR) {
            // Draw floor
            tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xpos * CELL_WIDTH, ypos * CELL_HEIGHT, 0);
        }  
        if (grid[# xpos, ypos] == NODE) {
            // Draw floor
            tile_add(bg_node, 0, 0, CELL_WIDTH, CELL_HEIGHT, xpos * CELL_WIDTH, ypos * CELL_HEIGHT, 0);    
            }
            if (grid[# xpos, ypos] == FLOOR_NOT_NODE) {
            // Draw floor
            tile_add(bg_floor2, 0, 0, CELL_WIDTH, CELL_HEIGHT, xpos * CELL_WIDTH, ypos * CELL_HEIGHT, 0);    
            }
    
 }   
}
// Get tile sizes 
var tw = CELL_WIDTH / 2;
var th = CELL_HEIGHT / 2;

// Add the tiles
for (var ypos = 0; ypos &lt; height * 2; ypos++) {
    for (var xpos = 0; xpos &lt; width * 2; xpos++) {
        if (grid[# xpos div 2, ypos div 2] == FLOOR) {
            // Get the tile's x and y
            var tx = xpos * tw;
            var ty = ypos * th;
            
            var is_right = grid[# (xpos + 1) div 2, ypos div 2] &gt; FLOOR;
            var is_left = grid[# (xpos - 1) div 2, ypos div 2] &gt; FLOOR;
            var is_top = grid[# xpos div 2, (ypos - 1) div 2] &gt; FLOOR;
            var is_bottom = grid[# xpos div 2, (ypos + 1) div 2] &gt; FLOOR;
            
            var is_top_right = grid[# (xpos + 1) div 2, (ypos - 1) div 2] &gt; FLOOR;
            var is_top_left = grid[# (xpos - 1) div 2, (ypos - 1) div 2] &gt; FLOOR;
            var is_bottom_right = grid[# (xpos + 1) div 2, (ypos + 1) div 2] &gt; FLOOR;
            var is_bottom_left = grid[# (xpos - 1) div 2, (ypos + 1) div 2] &gt; FLOOR;
            
            if (is_right) {
                if (is_bottom) {
                    tile_add(bg_walltiles, tw * 4, th * 1, tw, th, tx + tw, ty, -ty);
                } else if (is_top) {
                    if (is_top_right) {
                        tile_add(bg_walltiles, tw * 4, th * 0, tw, th, tx + tw, ty - th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw * 3, th * 0, tw, th, tx, ty - th, -ty);
                    }
                    tile_add(bg_walltiles, tw * 0, th * 1, tw, th, tx + tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw * 0, th * 1, tw, th, tx + tw, ty, -ty);
                }
            }
            
            if (is_left) {
                if (is_bottom) {
                    tile_add(bg_walltiles, tw * 3, th * 1, tw, th, tx - tw, ty, -ty);
                } else if (is_top) {
                    if (is_top_left) {
                        tile_add(bg_walltiles, tw * 3, th * 0, tw, th, tx - tw, ty - th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw * 4, th * 0, tw, th, tx, ty - th, -ty);
                    }
                    tile_add(bg_walltiles, tw * 2, th * 1, tw, th, tx - tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw * 2, th * 1, tw, th, tx - tw, ty, -ty);
                }
            }
            
            if (is_top) {
                if (!is_top_right) {
                    tile_add(bg_walltiles, tw * 2, th * 2, tw, th, tx, ty - th, -ty);
                } else if (!is_top_left) {
                    tile_add(bg_walltiles, tw * 0, th * 2, tw, th, tx, ty - th, -ty);
                } else {
                    tile_add(bg_walltiles, tw * 1, th * 2, tw, th, tx, ty - th, -ty);
                }
            }
            
            if (is_bottom) {
                if (!is_bottom_right) {
                    tile_add(bg_walltiles, tw * 2, th * 0, tw, th, tx, ty, -ty - tw);
                } else if (!is_bottom_left) {
                    tile_add(bg_walltiles, tw * 0, th * 0, tw, th, tx, ty, -ty - tw);
                } else {
                    tile_add(bg_walltiles, tw * 1, th * 0, tw, th, tx, ty, -ty - tw);
                }
            }
        }
    }
}
// Makes the stairs
scr_stairs(width, height);
// Create the player
scr_player(width, height);
//instance_create(cx * CELL_WIDTH + CELL_WIDTH / 2, cy * CELL_HEIGHT + CELL_HEIGHT / 2, obj_player);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restart room
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
