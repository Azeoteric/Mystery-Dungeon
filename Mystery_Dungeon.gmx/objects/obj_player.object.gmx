<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-16</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting up player
scr_grid();
scr_get_input();
global.is_game_running = true;
attackTimer = 0;
gamepad_set_axis_deadzone(0,0.3);

ACTION_COOLDOWN_MAX = 3600;
action_cooldown_current = 0;
player_has_piercing = 0;

//Health object management
health_array[0] = 0;
temp = scr_get_variable('player_health');
if (scr_get_player_variable('current_health') == 0) {
    scr_set_player_variable('current_health', temp);
}

if (room == rm_overworld) {
    scr_set_player_variable('current_health', temp);
}  

player_health = scr_get_player_variable('current_health');

//orbs
orbs = scr_get_player_variable('orbs');

//handles invincibility frames
INVINCIBILITY_FRAMES = 20;
invincibility_timer = 0;
health_last_frame = player_health;

// for the alchemist active
is_storming = false;
storm_delay = 30;
storm_timer = 0;
storm_duration = 3;
storm_duration_current = 0;
canAttack = true;
sprinkle_damage = 10;

// for the tank's active
TIME_INVINCIBLE = 180;
invulnerable = false;
is_shielding = false;
invulnerable_timer = 0;
shield_object = 0;

image_speed = .3;
xStart = x; 
yStart = y; 
hspd = 0;
vspd = 0;

// initialize variables
player_splash_damage = 0;
scr_load_player();



var tempy;
var tempx;

test_squeeb_spawn = false;
test_jack_spawn = false;
test_trap_spawn = false;
test_nacho_spawn = false;
test_squeep_boss_spawn = false;

// Creates a music object (might change this later)
music = 0;
if (!instance_exists(obj_music)) {
    music = instance_create(x, y, obj_music);
}

//Draws initial health
scr_draw_health();

//draws the orbs
instance_create(obj_player.x + 290, obj_player.y - 160, obj_orb_display);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enables invincibility frames and health management
if (health_last_frame != player_health &amp;&amp; invulnerable == false) {
    //invincibility frames
    invincibility_timer = INVINCIBILITY_FRAMES;
    invulnerable = true;
    
    //health
    scr_set_player_variable('current_health', player_health);
    if (player_health &gt; 0) {
        scr_update_hearts();
    }
        /*
        while (player_health != health_last_frame) {
            switch(health_last_frame % 2) {
                case 0:
                    health_array[health_last_frame div 2 - 1].image_index = 2;
                    break;
                case 1:
                    health_array[health_last_frame div 2 - 1].image_index = 1;
                    break;
            }
            health_last_frame--;
        } */
}
health_last_frame = player_health;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill the player
if (player_health &lt;= 0) {
    scr_player_death();
    with (music) {
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input and move also test squeeb spawn
//Move
if(global.is_game_running) {
   scr_get_input();
   var tempx = x;
   var tempy = y; 
   image_speed = .3;
   var xDirection = key_right + key_left;
   var yDirection = key_down + key_up;
   if (xDirection == 0 || yDirection = 0) {
        hspd = xDirection * spd;
        vspd = yDirection * spd;
   }
   else {
        hspd = xDirection * spd / sqrt(2);
        vspd = yDirection * spd / sqrt(2);
   }
   scr_move(hspd, vspd);
}
if(!global.is_game_running) {
    shouldAttack = false;
     image_speed = 0;
}

if(test_squeeb_spawn) {
    instance_create(x + 72, y, obj_squeeb);
    test_squeeb_spawn = false;
    //show_message("SPAWNED SQUEEB");
}

if(test_jack_spawn) {
    instance_create(x, y + 72, obj_jack);
    test_jack_spawn = false;
    //show_message("SPAWNED JACK");
}

if(test_trap_spawn) {
    instance_create(x + 72, y - 72, obj_trap);
    test_trap_spawn = false;
    //show_message("SPAWNED TRAP");
}

if(test_nacho_spawn) {
    instance_create(x - 72, y - 400, obj_nacho_duck);
    test_nacho_spawn = false;
    //show_message("SPAWNED NACHO");
}

if(test_squeep_boss_spawn) {
    instance_create(x - 400, y + 72, obj_squeep_boss);
    test_squeep_boss_spawn = false;
    //show_message("SPAWNED SQUEEP BOSS");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Minimap tracking
tempx1 = bbox_left div CELL_WIDTH;
tempy1 = bbox_top div CELL_HEIGHT;
tempx2 = bbox_right div CELL_WIDTH;
tempy2 = bbox_bottom div CELL_HEIGHT;
playerx = (tempx1 + tempx2) div 2;
playery = (tempy1 + tempy2) div 2;


var stairsx;
var stairsy; 
for (var ypos = 1; ypos &lt; height - 1; ypos++) {
    for (var xpos = 1; xpos &lt; height - 1; xpos++) {    
    //Finds the  and saves the stairs
       if (grid[# xpos, ypos] == STAIRS){
          stairsx = xpos; 
          stairsy = ypos; 
       }          
    }
}
for (var ypos = 1; ypos &lt; height - 1; ypos++) {
    for (var xpos = 1; xpos &lt; height - 1; xpos++) {
    //finds nodes that they player is not on anymore
     if(grid[# xpos, ypos] == NODE_PLAYER &amp;&amp; (xpos != playerx || ypos != playery)){
         grid[# xpos, ypos] = NODE_MAPPED;
     }
     
  //Checks for any tiles that are still labeled as player and makes them player-path.
     if (grid[# xpos, ypos] == PLAYER &amp;&amp; 
               (xpos != bbox_right div CELL_WIDTH || ypos != bbox_top div CELL_HEIGHT)){
               grid[# xpos, ypos] = PLAYER_PATH;
     }
     
     //Fills up the walls in minimap
     if (grid[# xpos, ypos] == PLAYER_PATH || (grid[# xpos, ypos] == PLAYER)) {
            //Check for Walls
        
            if(grid[# xpos + 1, ypos] == WALL) {
                grid[# xpos + 1, ypos] = WALL_MAPPED;
            }
            
            if(grid[# xpos - 1, ypos] == WALL) {
                grid[# xpos - 1, ypos] = WALL_MAPPED;
            }
            if(grid[# xpos, ypos + 1] == WALL) {
                grid[# xpos, ypos + 1] = WALL_MAPPED;
            }  
            if(grid[# xpos, ypos - 1] == WALL) {
                grid[# xpos, ypos - 1] = WALL_MAPPED;
            }
         }
         
        
  }
}
 //Makes the current tile(s) player tiles.
 if (grid[# playerx, playery] == FLOOR
   || grid[# playerx, playery] == PLAYER_PATH) {
             grid[# playerx, playery] = PLAYER;
 }
 
//Marking player position on nodes
if( grid[# playerx, playery] == NODE_MAPPED) {
    grid[# playerx, playery] = NODE_PLAYER;
}

     

 //Fills in rooms and maps the stairs 
 if (ds_grid_value_exists(grid, playerx - 5, playery - 3, playerx + 5, playery + 3, NODE)) {
   for (i = playerx - 5; i &lt;= playerx + 5; i++){
        for (j = playery - 3; j &lt;= playery + 3; j++){
            if (grid[# i, j] == NODE){
                if(ds_grid_value_exists(grid,  i - 2, j - 2, i + 2, j + 2, STAIRS) 
               || ds_grid_value_exists(grid,  i - 2, j - 2, i + 2, j + 2, STAIRS_MAPPED)) {
                  ds_grid_set_region(grid, i - 2, j - 2, i + 2, j + 2, PLAYER_PATH);
                  grid[# i, j] = NODE_MAPPED;
                  grid[# stairsx, stairsy] = STAIRS_MAPPED;    
               }
               else {
                  ds_grid_set_region(grid, i - 2, j - 2, i + 2, j + 2, PLAYER_PATH);
                  grid[# i, j] = NODE_MAPPED;
               } 
            }
      }
    }
}            
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Creates and Centers Mini-Map

   if(global.is_game_running) {
  
      if(key_map) {

         if(y &lt; 180){
           tempy = 180;   
         }
         if(y &gt;= room_height - 180){
           tempy = room_height - 180;
         }
         if(x &lt; 320){
           tempx = 320;   
         }
         if(x &gt;= room_width - 320){
           tempx = room_width - 320;
         }
         instance_create(tempx, tempy, obj_minimap);     
   }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Filling in stray tiles
//Files in the walls in sight
for (i = playerx - 4; i &lt;= playerx + 4; i++) {
   for (j = playery - 3; j &lt;= playery + 3; j++) {
      if (j &gt; width - 1 || i &gt; height - 1 ){
          continue;
      }
      if (grid[# i,j] == WALL) {
          grid[# i,j] = WALL_MAPPED;
      } 
      if (grid[# i,j] == FLOOR) {
          grid[# i,j] = PLAYER_PATH;
      }      
   }        
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack

shouldAttack = false //No projectile is fired if no attack key is pressed.
xDirection = 0 // 1 if to the right, -1 if to the left and 0 if no movement.
yDirection = 0 // 1 if down, -1 if up, and 0 if no movement.

//Checks the projectile should have a horizontal velocity component.
if (attackTimer &lt; firerate) {
    attackTimer++;
}
else{
    attackTimer = 0;
}
shootx = key_aim_right + key_aim_left;
if (shootx &gt; 0)
{
    xDirection = 1;
    shouldAttack = true;
}
else if (shootx &lt; 0)
{
    xDirection = -1;
    shouldAttack = true;
}

//Checks if the projectile has a vertical velocity component.

shooty = key_aim_down + key_aim_up;
if (shooty &lt; 0)
{
    yDirection = -1;
    shouldAttack = true;
}
else if (shooty &gt; 0)
{
    yDirection = 1;
    shouldAttack = true;
}
if (canAttack &amp;&amp; shouldAttack &amp;&amp; attackTimer &gt;= firerate &amp;&amp; global.is_game_running)
{
    tempDir = point_direction(x, y, x + xDirection + hspeed, y + yDirection + vspeed);
    scr_create_bullet(x, y, tempDir, bullet_speed, 75, 0, player_splash_damage);
    audio_play_sound(sfx_sprinkle_attack, 9, false);
    
    /*
    var projectile = (instance_create(x, y, obj_arrow_projectile));
    projectile.xDirection = xDirection;
    projectile.yDirection = yDirection;
    projectile.xMove = hspd;
    projectile.yMove = vspd;
    */
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cupcake Princess's sprite changes
if(!is_moving) {
     sprite_index = spr_cp_idle;
}
if(vmove &lt; 0 || (vmove &lt; 0 &amp;&amp; hmove != 0)) {
     sprite_index = spr_cp_wlk_up;
} 
  else if(vmove &gt; 0 || (vmove &gt; 0 &amp;&amp; hmove != 0)) {
       sprite_index = spr_cp_wlk_dwn;
  }
       else if(hmove &gt; 0) {
            sprite_index = spr_cp_wlk_rght;
      }
      else if(hmove &lt; 0) {
            sprite_index = spr_cp_wlk_lft;
      }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Action skill cooldown and activation (and i-frames)
if (action_cooldown_current &gt; 0) {
    action_cooldown_current--;
}

if (invulnerable_timer &gt; 0) {
    invulnerable_timer--;
}

if (invincibility_timer &gt; 0) {
    invincibility_timer--;
}

if (invincibility_timer == 0) {
    invulnerable = false;
}

if (invulnerable_timer == 0 &amp;&amp; is_shielding == true) {
    invulnerable = false;
    is_shielding = false;
    with (shield_object) {
        instance_destroy();
    }
}

if (storm_timer &gt; 0) {
    storm_timer--;
}

if (storm_duration_current = storm_duration) {
    storm_timer = 0;
    is_storming = false;
    canAttack = true;
    attack = scr_get_variable('player_attack_damage');
    storm_duration_current = 0;
}

if (is_storming &amp;&amp; storm_timer == 0) {
    scr_sprinklestorm();
    storm_duration_current++;
    storm_timer = storm_delay;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Makes the leave floor pop-up
if(room == rm_overworld) {
   if(!instance_exists(obj_level_select)) {
          instance_create(x, y + 60, obj_level_select); 
   }
} else {
     event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Makes the leave floor pop-up
if(!instance_exists(obj_leave_floor_menu)) {
       instance_create(x, y + 60, obj_leave_floor_menu); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enables tank's shield active

action_cooldown_current = 0;
scr_set_variable('player_has_sprinkle_shield', 1);
scr_set_variable('player_has_sprinklestorm', 1);
scr_load_player();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Action button
scr_action_skill();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="85">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// test
scr_level_up();
scr_load_player();
scr_delete_hearts();
scr_draw_health();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x+5,y+5,obj_badguy);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
