<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-16</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting up player
if(room = rm_test2) {
grid = obj_level_maker.grid;
}
if(room = rm_boss) {
grid = obj_boss_room.grid;
}
global.is_game_running = true;
attackTimer = 0;
gamepad_set_axis_deadzone(0,0.3);
image_speed = .3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input and move
//Move
if(global.is_game_running) {
   scr_get_input();
   image_speed = .3;
   var spd  = 3;
   var tempx = x;
   var tempy = y; 
   
   var hspd = (key_right + key_left) * spd;
   var vspd = (key_down + key_up) * spd;
   scr_move(hspd, vspd);
   //Makes sure that the minimap is always in the center of the room.
   if(key_map) {
      if(y &lt; 90){
        tempy = 90;   
      }
      if(y &gt; room_height - 90){
        tempy = room_height - 90;
      }
      if(x &lt; 160){
        tempx = 160;   
      }
      if(x &gt; room_width - 160){
        tempx = room_width - 160;
      }
      instance_create(tempx, tempy, obj_minimap);
      
   }
}    
if(!global.is_game_running) {
    shouldAttack = false;
     image_speed = 0;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack

shouldAttack = false //No projectile is fired if no attack key is pressed.
xDirection = 0 // 1 if to the right, -1 if to the left and 0 if no movement.
yDirection = 0 // 1 if down, -1 if up, and 0 if no movement.

//Checks the projectile should have a horizontal velocity component.
if (attackTimer &lt; 10) {
    attackTimer++;
}
else{
    attackTimer = 0;
}
shootx = key_aim_right + key_aim_left;
if (shootx &gt; 0)
{
    xDirection = 1;
    shouldAttack = true;
}
else if (shootx &lt; 0)
{
    xDirection = -1;
    shouldAttack = true;
}

//Checks if the projectile has a vertical velocity component.

shooty = key_aim_down + key_aim_up;
if (shooty &lt; 0)
{
    yDirection = -1;
    shouldAttack = true;
}
else if (shooty &gt; 0)
{
    yDirection = 1;
    shouldAttack = true;
}
if (shouldAttack &amp;&amp; attackTimer &gt;= 10 &amp;&amp; global.is_game_running)
{
    var projectile = (instance_create(x, y, obj_arrow_projectile));
    projectile.xDirection = xDirection;
    projectile.yDirection = yDirection;
    
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cupcake Princess's sprite changes
if(!is_moving) {
     sprite_index = spr_cp_idle;
}
if(vmove &lt; 0 || (vmove &lt; 0 &amp;&amp; hmove != 0)) {
     sprite_index = spr_cp_wlk_up;
} 
  else if(vmove &gt; 0 || (vmove &gt; 0 &amp;&amp; hmove != 0)) {
       sprite_index = spr_cp_wlk_dwn;
  }
       else if(hmove &gt; 0) {
            sprite_index = spr_cp_wlk_rght;
      }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(obj_leave_floor_menu)) {
       instance_create(x, y + 60, obj_leave_floor_menu); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
