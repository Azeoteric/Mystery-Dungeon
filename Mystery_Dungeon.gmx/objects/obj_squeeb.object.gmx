<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_squeep_standard</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-16</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variable inits.
scr_grid();
MOVE_SPEED = 2;
VISION_RADIUS = 256;
vSpeed = 0;
hSpeed = 0;
sees_player = false;
moveCounter = 0;
moveDir = irandom(3);
moveFrames = 80;
hspd = 0;
vspd = 0;
hit_points = 3;
image_speed = .2;
direction_choice = 2;
LEFT = 0;
DOWN = 1;
UP = 2;
RIGHT = 3;
has_hit_wall = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and attack - NOT USED**********
/*
tempx1 = bbox_left div CELL_WIDTH;
tempy1 = bbox_top div CELL_HEIGHT;
tempx2 = bbox_right div CELL_WIDTH;
tempy2 = bbox_bottom div CELL_HEIGHT;
enemyX = (tempx1 + tempx2) div 2;
enemyY = (tempy1 + tempy2) div 2;

if(sees_player) {
    //follow player and attack
    //grab player coordinates and compare values to 
    //squeeb values. Use the difference to know which direction to move.
    //On a certain interval, initiate attack movemement.
    //For a certain number of frames, set move speed much higher.
    //Check collision with player. If collides, dock health from player.
    //Knockback?
}
else {
    //Pick a random direction to move in and follow 
    //that direction for a certain number of frames.
    moveDir = irandom(3);
    if(moveCounter &lt; moveFrames) {
        moveCounter++;    
    }
    else {
        switch(moveDir) {
            case 0:
                //MOVE LEFT
                    hspeed = -1 * MOVE_SPEED;
                    vspeed = 0;
                    moveCounter = 0;
                break;
            case 1:
                //MOVE UP
                    hspeed = 0;
                    vspeed = -1 * MOVE_SPEED;
                    moveCounter = 0;
                break;
            case 2:
                //MOVE RIGHT
                    hspeed = 1 * MOVE_SPEED;
                    vspeed = 0;
                    moveCounter = 0;
                break;
            case 3:
                //MOVE DOWN
                    hspeed = 0;
                    vspeed = 1 * MOVE_SPEED;
                    moveCounter = 0;
                break;
        }
        /*
        var is_left_meeting = (grid[# enemyX - 1, enemyY] == WALL) ||
                            (grid[# enemyX - 1, enemyY] == WALL_MAPPED);
         var is_right_meeting = (grid[# enemyX + 1, enemyY] == WALL) ||
                            (grid[# enemyX + 1, enemyY] == WALL_MAPPED);
        var is_top_meeting = (grid[# enemyX, enemyY + 1] == WALL) ||
                           (grid[# enemyX, enemyY + 1] == WALL_MAPPED);
        var is_bottom_meeting = (grid[# enemyX, enemyY -1] == WALL) ||
                           (grid[# enemyX, enemyY - 1] == WALL_MAPPED);            
        if(is_right_meeting) {
            //MOVE LEFT
                    hspeed = -1 * MOVE_SPEED;
                    vspeed = 0;
                    moveCounter = 0;
        }
        if(is_left_meeting) {
            //MOVE RIGHT
            
                    hspeed = 1 * MOVE_SPEED;
                    vspeed = 0;
                    moveCounter = 0;
        }
        if(is_top_meeting){
            //MOVE DOWN
                    hspeed = 0;
                    vspeed = 1 * MOVE_SPEED;
                    moveCounter = 0;
        }
        if(is_bottom_meeting){
            //MOVE UP
                    hspeed = 0;
                    vspeed = -1 * MOVE_SPEED;
                    moveCounter = 0;
        }
 
    
      var is_x_meeting = (grid[# bbox_right div CELL_WIDTH, bbox_top div CELL_HEIGHT] &gt; FLOOR)  || 
                       (grid[# bbox_left div CELL_WIDTH, bbox_top div CELL_HEIGHT] &gt; FLOOR);
    
                      
    var is_y_meeting = (grid[# bbox_left div CELL_WIDTH, bbox_bottom  div CELL_HEIGHT] &gt; FLOOR)  || 
                       (grid[# bbox_right div CELL_WIDTH, bbox_bottom div CELL_HEIGHT] &gt; FLOOR);  
                        
    
                     
     }

     
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
if(global.is_game_running) {
moveFrames = irandom(80) + 40;
sees_player = scr_sees_player();
if(!sees_player){
    
   /* if(global.is_game_running) {
       if(moveCounter &gt;= moveFrames) {
          moveDir = irandom(3);
          moveCounter = 0;
       }
    
            switch(moveDir) {
                case 0:
                    //MOVE LEFT
                        hspd = -1;
                        vspd = 0;
                        moveCounter++;
                    break;
                case 1:
                    //MOVE UP
                        hspd = 0;
                        vspd = -1;
                        moveCounter++;
                    break;
                case 2:
                    //MOVE RIGHT
                        hspd = 1;
                        vspd = 0;
                        moveCounter++;
                    break;
                case 3:
                    //MOVE DOWN
                        hspd = 0;
                        vspd = 1;
                        moveCounter++;
                    break;
                }
       scr_move_enemy(hspd + sign(hspd) , vspd + sign(vspd));         
    }*/
    
        var currentX = x;
        var currentY = y;
        if(has_hit_wall){
            switch(direction_choice){
                case 0: //LEFT
                    //TRY TO MOVE DOWN. IF WALL, MOVE LEFT
                    scr_move_enemy(0, 1);
                    if(currentY == y){
                        currentX = x;
                        currentY = y;
                        scr_move_enemy(-1, 0);//MOVE LEFT
                        if(currentX == x){ //IF LEFT IS WALL, MOVE UP
                            currentX = x;
                            currentY = y;
                            scr_move_enemy(0, -1);
                            direction_choice = UP;
                            if(currentY == y){//IF UP IS WALL, MOVE RIGHT
                                currentX = x;
                                currentY = y;
                                scr_move_enemy(1, 0);
                                direction_choice = RIGHT;
                            }
                        }
                    }
                    else{
                        direction_choice = DOWN;
                    }
                    break;
                
                case 1: //DOWN
                    //TRY TO MOVE RIGHT. IF WALL, MOVE DOWN.
                    scr_move_enemy(1, 0);
                    if(currentX == x){
                        currentX = x;
                        currentY = y;
                        scr_move_enemy(0, 1);//MOVE DOWN
                        if(currentY == y){ //IF DOWN IS WALL, MOVE LEFT
                            currentX = x;
                            currentY = y;
                            scr_move_enemy(-1, 0);
                            direction_choice = LEFT;
                            if(currentX == x){//IF left IS WALL, MOVE UP
                                currentX = x;
                                currentY = y;
                                scr_move_enemy(0, -1);
                                direction_choice = UP;
                            }
                        }
                    }
                    else{
                        direction_choice = RIGHT;
                    }
                    break;  
                case 2: //UP 
                //TRY TO MOVE LEFT. IF WALL, MOVE UP.
                    scr_move_enemy(-1, 0);
                    if(currentX == x){
                        currentX = x;
                        currentY = y;
                        scr_move_enemy(0, -1);//MOVE UP
                        if(currentY == y){ //IF UP IS WALL, MOVE RIGHT
                            currentX = x;
                            currentY = y;
                            scr_move_enemy(1, 0);
                            direction_choice = RIGHT;
                            if(currentX == x){//IF RIGHT IS WALL, MOVE DOWN
                                currentX = x;
                                currentY = y;
                                scr_move_enemy(0, 1);
                                direction_choice = DOWN;
                            }
                        }
                    }
                    else{
                        direction_choice = LEFT;
                    }
                    break;
                case 3:  //RIGHT
                    //TRY TO MOVE UP. IF WALL, MOVE RIGHT
                    scr_move_enemy(0, -1);
                    if(currentY == y){
                        currentX = x;
                        currentY = y;
                        scr_move_enemy(1, 0);//MOVE RIGHT
                        if(currentX == x){ //IF RIGHT IS WALL, MOVE DOWN
                            currentX = x;
                            currentY = y;
                            scr_move_enemy(0, 1);
                            direction_choice = DOWN;
                            if(currentY == y){//IF DOWN IS WALL, MOVE LEFT
                                currentX = x;
                                currentY = y;
                                scr_move_enemy(-1, 0);
                                direction_choice = LEFT;
                            }
                        }
                    }
                    else{
                        direction_choice = UP;
                    }
                    break;
            }
        }
        /*else {
            switch(direction_choice){
                case 0:
                    scr_move_enemy(-1, 0);
                    if(currentX == x){
                        has_hit_wall = true;
                    }
                    break;
                case 1:
                    scr_move_enemy(0 , 1);
                    if(currentY == y){
                        has_hit_wall = true;
                    }
                    break;
                case 2:
                    scr_move_enemy(0, -1);
                    if(currentY == y){
                        has_hit_wall = true;
                    }
                    break
                case 3:
                    scr_move_enemy(1, 0);
                    if(currentX == x) {
                        has_hit_wall = true;
                    }
                    break;
            }
        }*/
    
}
else {
    hspd = 0;
    vspd = 0;
    if(obj_player.x &lt; x){
        hspd = -1;
    }
    else if(obj_player.x &gt; x){
        hspd = 1;
    }
    if(obj_player.y &lt; y){
        vspd = -1;
    }
    else if(obj_player.y &gt; y){
        vspd = 1;
    }
    var currentX = x;
    var currentY = y;
    if(vspd != 0 &amp;&amp; hspd != 0){
        scr_move_enemy((hspd) / sqrt(2), (vspd) / sqrt(2));
    }
    else {
        scr_move_enemy(hspd, vspd);
    }
    if(currentX == x &amp;&amp; x != obj_player.x){
        if(obj_player.y &lt; y){
            vspd = 1;
        }
        else if(obj_player.y &gt; y){
            vspd = -1;
        }
        y+= vspd * MOVE_SPEED;
    }
    if(currentY == y &amp;&amp; y != obj_player.y){
        if(obj_player.x &lt; x){
            hspd = 1;
        }
        else if(obj_player.x &gt; x){
            hspd = -1;
        }
        x+= hspd * MOVE_SPEED;
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles damage
if(place_meeting(x, y, obj_arrow_projectile)) {
                   hit_points -= obj_player.attack;
}
if(hit_points &lt; 0) {
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
