<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_squeep_standard</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variable inits.
MOVE_SPEED = 1;
VISION_RADIUS = 256;
vSpeed = 0;
hSpeed = 0;
sees_player = false;
moveCounter = 0;
moveFrames = 180;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player tracking

//Sets sees_player to true when player is within range and vision is unobstructed.    
var lengthVector = point_distance(x, y, obj_player.x, obj_player.y);

if((lengthVector &lt; VISION_RADIUS) &amp;&amp; collision_line(x, y, obj_player.x, obj_player.y,
        obj_wall, false, true) == null) {
        
    sees_player = true;
}
        

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and attack
if(sees_player) {
    //follow player and attack
    //grab player coordinates and compare values to 
    //squeeb values. Use the difference to know which direction to move.
    //On a certain interval, initiate attack movemement.
    //For a certain number of frames, set move speed much higher.
    //Check collision with player. If collides, dock health from player.
    //Knockback?
}
else {
    //Pick a random direction to move in and follow 
    //that direction for a certain number of frames.
    moveDir = irandom(3);
    if(moveCounter &lt; moveFrames) {
        moveCounter++;    
    }
    else {
        switch(moveDir) {
            case 0:
                //MOVE LEFT
                //CHECK COLLISION
                if (!place_meeting(x - MOVE_SPEED, y, obj_wall)) {
                    x -= MOVE_SPEED;
                    moveCounter = 0;
                }
                break;
            case 1:
                //MOVE UP
                //CHECK COLLISION
                if (!place_meeting(x, y + MOVE_SPEED, obj_wall)) {
                     y += MOVE_SPEED;
                     moveCounter = 0;
                }
                break;
            case 2:
                //MOVE RIGHT
                //CHECK COLLISION
                if (!place_meeting(x + MOVE_SPEED, y, obj_wall)) {
                    x += MOVE_SPEED;
                    moveCounter = 0;
                }
                break;
            case 3:
                //MOVE DOWN
                //CHECK COLLISION
                if (!place_meeting(x, y - MOVE_SPEED, obj_wall)) {
                    y -= MOVE_SPEED;
                    moveCounter = 0;
                }
                break;
        }
        
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
